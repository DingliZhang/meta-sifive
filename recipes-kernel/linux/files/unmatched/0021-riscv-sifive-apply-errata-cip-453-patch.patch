From fb63756f6b2e49160aaf85789f8ed88135eeea50 Mon Sep 17 00:00:00 2001
From: Vincent Chen <vincent.chen@sifive.com>
Date: Tue, 12 Jan 2021 15:29:29 +0800
Subject: [PATCH 21/29] riscv: sifive: apply errata cip-453 patch

Add sign extension to the $badaddr when the exception type is instruction
page fault or instruciton access fault to workaround the errata cip-453.

To avoid affecting the existing code sequence, this patch creates a
trampoline to add sign extension to the $baddaddr, and then replaces
the original exception handlers with this trampoline by ALTDATA. In this
case, only the specific sifive CPU jumps to the do_page_fault through
this trampoline. Other CPUs are not affected.

Signed-off-by: Vincent Chen <vincent.chen@sifive.com>
---
 arch/riscv/errata/Makefile                |  1 +
 arch/riscv/errata/sifive/Makefile         |  2 +
 arch/riscv/errata/sifive/altern_ops.c     | 20 ++++++++++
 arch/riscv/errata/sifive/errata.h         |  6 +++
 arch/riscv/errata/sifive/errata_cip_453.S | 64 +++++++++++++++++++++++++++++++
 5 files changed, 93 insertions(+)
 create mode 100644 arch/riscv/errata/sifive/Makefile
 create mode 100644 arch/riscv/errata/sifive/altern_ops.c
 create mode 100644 arch/riscv/errata/sifive/errata.h
 create mode 100644 arch/riscv/errata/sifive/errata_cip_453.S

diff --git a/arch/riscv/errata/Makefile b/arch/riscv/errata/Makefile
index 43e6d54..be93ded 100644
--- a/arch/riscv/errata/Makefile
+++ b/arch/riscv/errata/Makefile
@@ -1 +1,2 @@
 obj-y	+= alternative.o
+obj-$(CONFIG_SOC_SIFIVE) += sifive/
diff --git a/arch/riscv/errata/sifive/Makefile b/arch/riscv/errata/sifive/Makefile
new file mode 100644
index 00000000..b7f4cd7
--- /dev/null
+++ b/arch/riscv/errata/sifive/Makefile
@@ -0,0 +1,2 @@
+obj-y += altern_ops.o
+obj-y += errata_cip_453.o
diff --git a/arch/riscv/errata/sifive/altern_ops.c b/arch/riscv/errata/sifive/altern_ops.c
new file mode 100644
index 00000000..0dcec17
--- /dev/null
+++ b/arch/riscv/errata/sifive/altern_ops.c
@@ -0,0 +1,20 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (C) 2021 Sifive.
+ */
+
+#include <asm/alternative.h>
+#include <linux/kernel.h>
+
+#include "errata.h"
+
+static bool __init sifive_errata_check(struct alt_entry *alt)
+{
+	if (cpu_manufactor_info.vendorid == alt->vendorid &&
+	    cpu_manufactor_info.archid == alt->archid &&
+	    cpu_manufactor_info.impid == alt->impid)
+		return true;
+	return false;
+}
+
+REGISTER_ERRATA_CHECKFUNC(sifive_errata_check, SIFIVE_VENDOR_ID);
diff --git a/arch/riscv/errata/sifive/errata.h b/arch/riscv/errata/sifive/errata.h
new file mode 100644
index 00000000..1f3be47
--- /dev/null
+++ b/arch/riscv/errata/sifive/errata.h
@@ -0,0 +1,6 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * Copyright (C) 2021 SiFive
+ */
+
+#define SIFIVE_VENDOR_ID	0x489
diff --git a/arch/riscv/errata/sifive/errata_cip_453.S b/arch/riscv/errata/sifive/errata_cip_453.S
new file mode 100644
index 00000000..c1ea974
--- /dev/null
+++ b/arch/riscv/errata/sifive/errata_cip_453.S
@@ -0,0 +1,64 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * Copyright (C) 2021 SiFive
+ */
+
+#include <linux/linkage.h>
+#include <asm/asm.h>
+#include <asm/asm-offsets.h>
+#include <asm/alternative.h>
+#include "errata.h"
+
+#define INSN_PAGE_FAULT 	excp_vect_table + 12 << RISCV_LGPTR
+#define INSN_ACCESS_FAULT	excp_vect_table + 1 << RISCV_LGPTR
+#define P_TRAMPOLINE		sifive_ipage_fault_trampoline
+#define A_TRAMPOLINE		sifive_iaccess_fault_trampoline
+#define MARCHID 		0x8000000000000007
+#define MIMPID   		0x20181004
+#define LEN 			1 << RISCV_LGPTR
+
+.macro ADD_SIGN_EXT pt_reg badaddr tmp_reg
+	REG_L \badaddr, PT_BADADDR(\pt_reg)
+	li \tmp_reg,1
+	slli \tmp_reg,\tmp_reg,0x26
+	and \tmp_reg,\tmp_reg,\badaddr
+	beqz \tmp_reg, 1f
+	li \tmp_reg,-1
+	slli \tmp_reg,\tmp_reg,0x27
+	or \badaddr,\tmp_reg,\badaddr
+	REG_S \badaddr, PT_BADADDR(\pt_reg)
+1:
+.endm
+
+
+.globl sifive_ipage_fault_trampoline
+.type  sifive_ipage_fault_trampoline, @object
+.size  sifive_ipage_fault_trampoline, 8
+sifive_ipage_fault_trampoline:
+.dword do_page_fault_trampoline
+
+ENTRY(do_page_fault_trampoline)
+	ADD_SIGN_EXT a0, t0, t1
+	la t0, do_page_fault
+	jr t0
+END(do_page_fault_trampoline)
+
+.globl sifive_iaccess_fault_trampoline
+.type  sifive_iaccess_fault_trampoline, @object
+.size  sifive_iaccess_fault_trampoline, 8
+sifive_iaccess_fault_trampoline:
+.dword do_trap_insn_fault_trampoline
+
+ENTRY(do_trap_insn_fault_trampoline)
+	ADD_SIGN_EXT a0, t0, t1
+	la t0, do_trap_insn_fault
+	jr t0
+END(do_trap_insn_fault_trampoline)
+
+/*
+ * Replace the page fault exception handler with sifive_page_fault_trampoline
+ * function
+ */
+ALTDATA(INSN_PAGE_FAULT, P_TRAMPOLINE, SIFIVE_VENDOR_ID, MARCHID, MIMPID, LEN, LEN)
+ALTDATA(INSN_ACCESS_FAULT, A_TRAMPOLINE, SIFIVE_VENDOR_ID, MARCHID, MIMPID, LEN, LEN)
+
-- 
2.7.4

